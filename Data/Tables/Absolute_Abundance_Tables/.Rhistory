# Define a custom color palette (update `palette` with your desired colors)
palette <- c("Healthy" = "#6a61d6", "Acne" = "#f38a77")
# Perform Wilcoxon test
p_value_wilcox <- wilcox.test(
sebumeter_casual_level_mean_forehead_left ~ class,
data = metadata_df
)$p.value
# Perform ANOVA to calculate F-statistic and p-value
fit <- aov(sebumeter_casual_level_mean_forehead_left ~ class, data = metadata_df)
anova_summary <- summary(fit)[[1]]
f_stat <- anova_summary$`F value`[1]
p_value_anova <- anova_summary$`Pr(>F)`[1]
# Format all statistics
formatted_wilcox <- paste("Wilcoxon p =", format(p_value_wilcox, digits = 3, scientific = TRUE))
formatted_anova <- paste("ANOVA p =", format(p_value_anova, digits = 3, scientific = TRUE),
", F =", format(f_stat, digits = 3))
# Combine into annotation text
annot_text <- paste(formatted_wilcox, formatted_anova, sep = "\n")
# Add the plot
plot <- metadata_df %>%
ggplot(aes(
x = sebumeter_casual_level_mean_forehead_left,
y = class,
fill = class
)) +
# Add half-violin plots for density with vertical offset
stat_halfeye(
data = . %>% filter(class == "Healthy"),
adjust = 0.8,
width = 0.6,
.width = 0,
justification = 0,
point_colour = NA,
slab_alpha = 0.8,
position = position_nudge(y = -1.4),
aes(fill = class)
) +
stat_halfeye(
data = . %>% filter(class == "Acne"),
adjust = 0.8,
width = 0.6,
.width = 0,
justification = 0,
point_colour = NA,
slab_alpha = 0.8,
position = position_nudge(y = 1.4),
aes(fill = class)
) +
# Add boxplots with vertical offsets
geom_boxplot(
data = . %>% filter(class == "Healthy"),
width = 0.15,
outlier.shape = NA,
alpha = 0.7,
position = position_nudge(y = -1.4),
aes(fill = class)
) +
geom_boxplot(
data = . %>% filter(class == "Acne"),
width = 0.15,
outlier.shape = NA,
alpha = 0.7,
position = position_nudge(y = 1.4),
aes(fill = class)
) +
# Add dot histogram with downward stacking
geom_dots(
data = . %>% filter(class == "Healthy"),
aes(color = class),
side = "bottom",
binwidth = 2,
justification = 0.1,
position = position_nudge(y = -2.4)
) +
geom_dots(
data = . %>% filter(class == "Acne"),
aes(color = class),
side = "bottom",
binwidth = 2,
justification = 0.1,
position = position_nudge(y = 0.4)
) +
# Customize colors
scale_fill_manual(values = palette) +
scale_color_manual(values = palette) +
# Add combined annotation for p-value and F-statistic
geom_text(
aes(
x = 5,
y = 3,
label = annot_text
),
inherit.aes = FALSE,
size = 5,
hjust = 0
) +
# Customize labels and theme
labs(
title = "Per-sample Sebum Levels by Acne Status",
x = "Sebum Level (\u03bcg/cm\u00b2)",  # Unicode for µg/cm²
y = NULL
) +
theme_minimal() +
theme(
plot.title = element_text(size = 20, hjust = 0.75, margin = margin(b = 20)),
axis.title.x = element_text(size = 18, margin = margin(t = 15)),
axis.text.x = element_text(size = 14),
legend.position = "none",
axis.text.y = element_blank(),
plot.margin = unit(c(0.5, 0.5, 0.5, 0.5), "cm"),
plot.background = element_rect(fill = "white", color = NA)
) +
# Add custom labels with manual positions
geom_text(
data = data.frame(x = c(-15, -15), y = c(2.43, 0.67), label = c("Acne", "Healthy")),
aes(x = x, y = y, label = label),
inherit.aes = FALSE,
size = 6,
hjust = 0
)
# Save the figure
ggsave(
"../Figures/clinical_metadata_Figures/sebum_levels_raincloud-plot.png",
plot = plot,
width = 8, height = 6, dpi = 600,
units = "in", device = "png"
)
# Load necessary libraries
library(ggplot2)
library(ggdist)
library(dplyr)
# Define the file path for the metadata file
metadata_file <- "../Metadata/metadata_df.csv"
# Read the metadata file
metadata_df <- read.csv(metadata_file)
# Define a custom color palette (update `palette` with your desired colors)
palette <- c("Healthy" = "#6a61d6", "Acne" = "#f38a77")
# Perform Wilcoxon test
p_value_wilcox <- wilcox.test(
sebumeter_casual_level_mean_forehead_left ~ class,
data = metadata_df
)$p.value
# Perform ANOVA to calculate F-statistic and p-value
fit <- aov(sebumeter_casual_level_mean_forehead_left ~ class, data = metadata_df)
anova_summary <- summary(fit)[[1]]
f_stat <- anova_summary$`F value`[1]
p_value_anova <- anova_summary$`Pr(>F)`[1]
# Format all statistics
formatted_wilcox <- paste("Wilcoxon p =", format(p_value_wilcox, digits = 3, scientific = TRUE))
formatted_anova <- paste("ANOVA p =", format(p_value_anova, digits = 3, scientific = TRUE),
", F =", format(f_stat, digits = 3))
# Combine into annotation text
annot_text <- paste(formatted_wilcox, formatted_anova, sep = "\n")
# Add the plot
plot <- metadata_df %>%
ggplot(aes(
x = sebumeter_casual_level_mean_forehead_left,
y = class,
fill = class
)) +
# Add half-violin plots for density with vertical offset
stat_halfeye(
data = . %>% filter(class == "Healthy"),
adjust = 0.8,
width = 0.6,
.width = 0,
justification = 0,
point_colour = NA,
slab_alpha = 0.8,
position = position_nudge(y = -1.4),
aes(fill = class)
) +
stat_halfeye(
data = . %>% filter(class == "Acne"),
adjust = 0.8,
width = 0.6,
.width = 0,
justification = 0,
point_colour = NA,
slab_alpha = 0.8,
position = position_nudge(y = 1.4),
aes(fill = class)
) +
# Add boxplots with vertical offsets
geom_boxplot(
data = . %>% filter(class == "Healthy"),
width = 0.15,
outlier.shape = NA,
alpha = 0.7,
position = position_nudge(y = -1.4),
aes(fill = class)
) +
geom_boxplot(
data = . %>% filter(class == "Acne"),
width = 0.15,
outlier.shape = NA,
alpha = 0.7,
position = position_nudge(y = 1.4),
aes(fill = class)
) +
# Add dot histogram with downward stacking
geom_dots(
data = . %>% filter(class == "Healthy"),
aes(color = class),
side = "bottom",
binwidth = 2,
justification = 0.1,
position = position_nudge(y = -2.4)
) +
geom_dots(
data = . %>% filter(class == "Acne"),
aes(color = class),
side = "bottom",
binwidth = 2,
justification = 0.1,
position = position_nudge(y = 0.4)
) +
# Customize colors
scale_fill_manual(values = palette) +
scale_color_manual(values = palette) +
# Add combined annotation for p-value and F-statistic
geom_text(
aes(
x = 5,
y = 3.2,
label = annot_text
),
inherit.aes = FALSE,
size = 5,
hjust = 0
) +
# Customize labels and theme
labs(
title = "Per-sample Sebum Levels by Acne Status",
x = "Sebum Level (\u03bcg/cm\u00b2)",  # Unicode for µg/cm²
y = NULL
) +
theme_minimal() +
theme(
plot.title = element_text(size = 20, hjust = 0.75, margin = margin(b = 20)),
axis.title.x = element_text(size = 18, margin = margin(t = 15)),
axis.text.x = element_text(size = 14),
legend.position = "none",
axis.text.y = element_blank(),
plot.margin = unit(c(0.5, 0.5, 0.5, 0.5), "cm"),
plot.background = element_rect(fill = "white", color = NA)
) +
# Add custom labels with manual positions
geom_text(
data = data.frame(x = c(-15, -15), y = c(2.43, 0.67), label = c("Acne", "Healthy")),
aes(x = x, y = y, label = label),
inherit.aes = FALSE,
size = 6,
hjust = 0
)
# Save the figure
ggsave(
"../Figures/clinical_metadata_Figures/sebum_levels_raincloud-plot.png",
plot = plot,
width = 8, height = 6, dpi = 600,
units = "in", device = "png"
)
# Load required packages
if (!requireNamespace("ANCOMBC", quietly = TRUE)) {
install.packages("remotes")
remotes::install_github("FrederickHuangLin/ANCOMBC")
}
library(ANCOMBC)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ANCOMBC")
library(ANCOMBC)
pwd
getcwd()
getwd()
ls
setwd('/Users/yangchen/PhD/Gallo_lab/16S_AD_South-Africa/Data/Tables/Absolute_Abundance_Tables')
getcwd()
getwd()
feature_table <- read.table("df_16S_filtered_feature_table_rare_Genus_absolute_10filtered_ancombc.tsv", sep = "\t", header = TRUE, row.names = 1, check.names = FALSE)
metadata <- read.table("differential_abundance_groups.tsv", sep = "\t", header = TRUE, row.names = 1, check.names = FALSE)
feature_table <- read.table("df_16S_filtered_feature_table_rare_Genus_absolute_10filtered_ancombc.tsv", sep = "\t", header = TRUE, row.names = 1, check.names = FALSE)
metadata <- read.table("../../Metadata/differential_abundance_groups.tsv", sep = "\t", header = TRUE, row.names = 1, check.names = FALSE)
metadata
common_samples <- intersect(colnames(feature_table), rownames(metadata))
feature_table <- feature_table[, common_samples]
metadata <- metadata[common_samples, , drop = FALSE]
feature_table <- t(feature_table)
res <- ancombc(
formula = "group",   # <-- CHANGE THIS to your metadata column
feature_table = feature_table,
sample_metadata = metadata,
p_adj_method = "fdr",
lib_cut = 0,
group = "group",
zero_cut = 0.90,
neg_lb = TRUE
)
res <- ancombc(
formula = "microbiome_type",
feature_table = feature_table,
sample_metadata = metadata,
p_adj_method = "fdr",
lib_cut = 0,
group = "group",
zero_cut = 0.90,
neg_lb = TRUE
)
# Run ANCOM-BC
res <- ancombc(
formula = "microbiome_type",
feature_table = feature_table,
sample_metadata = metadata,
p_adj_method = "fdr",
lib_cut = 0,
group = "microbiome_type",
zero_cut = 0.90,
neg_lb = TRUE
)
res <- ancombc(
formula = "microbiome_type",
feature_table = feature_table,
sample_metadata = metadata,
p_adj_method = "fdr"
)
res <- ancombc2(
phyloseq = ps,
formula = "microbiome_type",  # ← change to your variable
p_adj_method = "fdr",
zero_cut = 0.90,
lib_cut = 0,
group = "microbiome_type",    # ← if you want pairwise comparisons
struc_zero = TRUE
)
feature_table <- read.table("feature_table.tsv", sep = "\t", header = TRUE, row.names = 1, check.names = FALSE)
# Load your data
feature_table <- read.table("df_16S_filtered_feature_table_rare_Genus_absolute_10filtered_ancombc.tsv", sep = "\t", header = TRUE, row.names = 1, check.names = FALSE)
metadata <- read.table("../../Metadata/differential_abundance_groups.tsv", sep = "\t", header = TRUE, row.names = 1, check.names = FALSE)
# Transpose feature table so rows = samples, columns = taxa
feature_table <- t(feature_table)
# Create phyloseq object
otu <- otu_table(feature_table, taxa_are_rows = FALSE)
# 1. Load required packages
library(phyloseq)
BiocManager::install("phyloseq")
library(phyloseq)
library(ANCOMBC)
# 2. Read in your data
feature_table <- read.table("feature_table.tsv", sep = "\t", header = TRUE, row.names = 1, check.names = FALSE)
feature_table <- read.table("df_16S_filtered_feature_table_rare_Genus_absolute_10filtered_ancombc.tsv", sep = "\t", header = TRUE, row.names = 1, check.names = FALSE)
metadata <- read.table("../../Metadata/differential_abundance_groups.tsv", sep = "\t", header = TRUE, row.names = 1, check.names = FALSE)
feature_table <- t(feature_table)
# 4. Build phyloseq object
otu <- otu_table(feature_table, taxa_are_rows = FALSE)
samp <- sample_data(metadata)
ps <- phyloseq(otu, samp)
# Check sample names from both objects
sample_names(otu)   # from the feature table
sample_names(samp)  # from the metadata
# Intersect to find common samples
common_samples <- intersect(sample_names(otu), sample_names(samp))
# Filter both to keep only shared samples
otu <- prune_samples(common_samples, otu)
common_samples
feature_table <- read.table("df_16S_filtered_feature_table_rare_Genus_absolute_10filtered_ancombc.tsv", sep = "\t", header = TRUE, row.names = 1, check.names = FALSE)
metadata <- read.table("../../Metadata/differential_abundance_groups.tsv", sep = "\t", header = TRUE, row.names = 1, check.names = FALSE)
# Check sample names from both objects
sample_names(otu)   # from the feature table
sample_names(samp)  # from the metadata
# Intersect to find common samples
common_samples <- intersect(sample_names(otu), sample_names(samp))
# Filter both to keep only shared samples
otu <- prune_samples(common_samples, otu)
common_samples
otu <- otu_table(feature_table, taxa_are_rows = FALSE)
samp <- sample_data(metadata)
ps <- phyloseq(otu, samp)
ps
res <- ancombc2(
phyloseq = ps,
formula = "microbiome_type",  # ← change to your variable
p_adj_method = "fdr",
zero_cut = 0.90,
lib_cut = 0,
group = "microbiome_type",    # ← if you want pairwise comparisons
struc_zero = TRUE
)
remotes::install_github("FrederickHuangLin/ANCOMBC")
res <- ancombc(
phyloseq = ps,
formula = "microbiome_type",  # ← change to your variable
p_adj_method = "fdr",
zero_cut = 0.90,
lib_cut = 0,
group = "microbiome_type",    # ← if you want pairwise comparisons
struc_zero = TRUE
)
res <- ancombc(
feature_table = feature_table,
sample_metadata = metadata,
formula = "microbiome_type",
group = "microbiome_type",
p_adj_method = "fdr"
)
# Run ANCOM-BC
res <- ancombc(
feature_table = otu,
sample_metadata = samp,
formula = "microbiome_type",
group = "microbiome_type",
p_adj_method = "fdr"
)
res <- ancombc(
feature_table = feature_table,
sample_metadata = metadata,
formula = "microbiome_type",
group = "microbiome_type",
p_adj_method = "fdr"
)
feature_table <- read.table("df_16S_filtered_feature_table_rare_Genus_absolute_10filtered_ancombc.tsv", sep = "\t", header = TRUE, row.names = 1, check.names = FALSE)
metadata <- read.table("../../Metadata/differential_abundance_groups.tsv", sep = "\t", header = TRUE, row.names = 1, check.names = FALSE)
# 3. Transpose if taxa are rows (phyloseq needs samples as rows)
#feature_table <- t(feature_table)
# 4. Build phyloseq object
#otu <- otu_table(feature_table, taxa_are_rows = FALSE)
#samp <- sample_data(metadata)
#ps <- phyloseq(otu, samp)
# Run ANCOM-BC
res <- ancombc(
feature_table = feature_table,
sample_metadata = metadata,
formula = "microbiome_type",
group = "microbiome_type",
p_adj_method = "fdr"
)
library(phyloseq)
library(ANCOMBC)
setwd('/Users/yangchen/PhD/Gallo_lab/16S_AD_South-Africa/Data/Tables/Absolute_Abundance_Tables')
# 2. Read in your data
feature_table <- read.table("df_16S_filtered_feature_table_rare_Genus_absolute_10filtered_ancombc.tsv", sep = "\t", header = TRUE, row.names = 1, check.names = FALSE)
metadata <- read.table("../../Metadata/differential_abundance_groups.tsv", sep = "\t", header = TRUE, row.names = 1, check.names = FALSE)
# 3. Transpose if taxa are rows (phyloseq needs samples as rows)
#feature_table <- t(feature_table)
# Run ANCOM-BC
res <- ancombc(
feature_table = feature_table,
sample_metadata = metadata,
formula = "microbiome_type",
group = "microbiome_type",
p_adj_method = "fdr"
)
feature_table <- read.table("df_16S_filtered_feature_table_rare_Genus_absolute_10filtered_ancombc.tsv",
sep = "\t", header = TRUE, row.names = 1, check.names = FALSE)
metadata <- read.table("../../Metadata/differential_abundance_groups.tsv",
sep = "\t", header = TRUE, row.names = 1, check.names = FALSE)
# Ensure sample names match
common_samples <- intersect(rownames(feature_table), rownames(metadata))
feature_table <- feature_table[common_samples, ]
metadata <- metadata[common_samples, ]
metadata
feature_table
common_samples
otu <- otu_table(feature_table, taxa_are_rows = FALSE)
samp <- sample_data(metadata)
metadata <- read.table(
"../../Metadata/differential_abundance_groups.tsv",
sep = "\t",
header = TRUE,
row.names = 1,       # ← this sets sample IDs as row names
check.names = FALSE
)
metadata
common_samples <- intersect(rownames(feature_table), rownames(metadata))
feature_table <- feature_table[common_samples, ]
metadata <- metadata[common_samples, ]
metadata
samp <- sample_data(metadata)
ps
samp <- sample_data(metadata)
head(rownames(metadata))
head(rownames(metadata))
metadata <- read.table(
"../../Metadata/differential_abundance_groups.tsv",
sep = "\t",
header = TRUE,
row.names = 1,       # ← this sets sample IDs as row names
check.names = FALSE
)
head(rownames(metadata))
metadata <- read.table(
"../../Metadata/differential_abundance_groups.tsv",
sep = "\t",
header = TRUE,
row.names = 1,       # ← this sets sample IDs as row names
check.names = FALSE
)
head(rownames(metadata))
samp <- sample_data(metadata)
ps <- phyloseq(otu, samp)
ps
res <- ancombc(
phyloseq = ps,
formula = "microbiome_type",
group = "microbiome_type",
p_adj_method = "fdr"
)
version
R.version.string
remotes::install_github("FrederickHuangLin/ANCOMBC@v2.1.0")
browseURL("https://cran.r-project.org/bin/macosx/")
R.version.string
R.version.string
